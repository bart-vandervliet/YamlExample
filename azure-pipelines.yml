# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
- stage: BuildStage
  displayName: Build stage

  jobs:
  - job: AgentJob1
    displayName: Agent job 1
    steps:
    - script: echo '##vso[task.setvariable variable=localVar]foo'
      displayName: Set variable localVar
      name: SetLocalVariable
    
    - script: echo localVar = $(localVar)
      displayName: Display variable localVar
    
    - script: echo '##vso[task.setvariable variable=outputVar;isoutput=true]bar'
      displayName: Set variable outputVar
      name: SetOutputVariable

  - job:
    displayName: Agent job 2
    dependsOn: AgentJob1
    variables:
      LocalVarRuntimeExpression: $[ dependencies.AgentJob1.outputs['SetLocalVariable.localVar'] ]
      OutputVarRuntimeExpression: $[ dependencies.AgentJob1.outputs['SetOutputVariable.outputVar'] ]

    steps:
    - script: echo localVar = $(localVar)
      displayName: Display variable localVar - runtime variable
    
    - script: echo localVar = $(LocalVarRuntimeExpression)
      displayName: Display variable localVar - runtime expression
    
    - script: echo outputVar = $(OutputVarRuntimeExpression)
      displayName: Display variable outputVar - runtime expression

- stage: ReleaseStage
  displayName: Release stage
  variables:
    OutputVarRuntimeExpression1: $[ stageDependencies.BuildStage.AgentJob1.outputs['SetOutputVariable.outputVar'] ]
    OutputVarRuntimeExpression2: $[ stageDependencies.BuildStage.AgentJob1.outputs.SetOutputVariable.outputVar ]

  jobs:
  - job:
    displayName: Agent job 3
    steps:
    - script: echo outputVar = $(OutputVarRuntimeExpression1)
      displayName: Display variable outputVar - index

    - script: echo outputVar = $(OutputVarRuntimeExpression2)
      displayName: Display variable outputVar - property dereference
